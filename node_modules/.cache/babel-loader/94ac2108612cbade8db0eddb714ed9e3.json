{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n    async function fetchData() {\n      try {\n        const response = await fetch(url, {\n          signal: abortCont.signal\n        });\n\n        if (!response.ok) {\n          throw new Error('Could not fetch data from server');\n        }\n\n        const data = await response.json();\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('Fetch Aborted');\n        } else {\n          setError(error.message);\n          setIsPending(false);\n        }\n      }\n    }\n\n    fetchData();\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n} // This hook takes a URL as an argument and returns an object containing the data, isPending, and error states. The useEffect block fetches data from the specified URL, sets the states accordingly, and returns a cleanup function that aborts the fetch request if it's still in progress when the component is unmounted.\n\n_s(useFetch, \"kbGVbgObkPRWJGb0cHAEJjKTGv4=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetchData","response","fetch","signal","ok","Error","json","name","console","log","message","abort"],"sources":["/home/user/Documents/DCI-Projects/spa-component-usememo-ahmadad62/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport function useFetch(url) {\n    const [data, setData] = useState([]);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        async function fetchData() {\n            try {\n                const response = await fetch(url, { signal: abortCont.signal });\n\n                if (!response.ok) {\n                    throw new Error('Could not fetch data from server');\n                }\n\n                const data = await response.json();\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            } catch (error) {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    setError(error.message);\n                    setIsPending(false);\n                }\n            }\n        }\n\n        fetchData();\n\n        return () => abortCont.abort();\n    }, [url]);\n\n    return { data, isPending, error };\n}\n\n\n// This hook takes a URL as an argument and returns an object containing the data, isPending, and error states. The useEffect block fetches data from the specified URL, sets the states accordingly, and returns a cleanup function that aborts the fetch request if it's still in progress when the component is unmounted."],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EAAA;;EAC1B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;;IAEA,eAAeC,SAAf,GAA2B;MACvB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAD,EAAM;UAAEY,MAAM,EAAEL,SAAS,CAACK;QAApB,CAAN,CAA5B;;QAEA,IAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;UACd,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;QACH;;QAED,MAAMb,IAAI,GAAG,MAAMS,QAAQ,CAACK,IAAT,EAAnB;QACAb,OAAO,CAACD,IAAD,CAAP;QACAG,YAAY,CAAC,KAAD,CAAZ;QACAE,QAAQ,CAAC,IAAD,CAAR;MACH,CAXD,CAWE,OAAOD,KAAP,EAAc;QACZ,IAAIA,KAAK,CAACW,IAAN,KAAe,YAAnB,EAAiC;UAC7BC,OAAO,CAACC,GAAR,CAAY,eAAZ;QACH,CAFD,MAEO;UACHZ,QAAQ,CAACD,KAAK,CAACc,OAAP,CAAR;UACAf,YAAY,CAAC,KAAD,CAAZ;QACH;MACJ;IACJ;;IAEDK,SAAS;IAET,OAAO,MAAMF,SAAS,CAACa,KAAV,EAAb;EACH,CA5BQ,EA4BN,CAACpB,GAAD,CA5BM,CAAT;EA8BA,OAAO;IAAEC,IAAF;IAAQE,SAAR;IAAmBE;EAAnB,CAAP;AACH,C,CAGD;;GAvCgBN,Q"},"metadata":{},"sourceType":"module"}